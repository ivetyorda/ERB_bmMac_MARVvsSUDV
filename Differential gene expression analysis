#set directory to location of TSV values----

getwd()
setwd("C:/Users/user/folder1/folder2/")
files = list.files()

#reorder files

files = files[c(1,2,3,4,5,6,7,8)]
list.files()
all(file.exists(files))

#use these to set sample names in order 

samples=c("mock1","mock2","mock3","mock4","treatment1","treatment2","treatment3","treatment4")

#Load necessary packages
library(tximport)
library(readr)
library(EnsDb.Hsapiens.v86)
library(DESeq2)
library(apeglm)
library("BiocParallel")
library("pheatmap")
library("tidyverse")
library(edgeR)
library(RColorBrewer)

#If you need to install any of the above packages use either:
install.packages("")
BiocManager::install(c("", ""))

# Load the GTF/GFF file gtf_file

library(rtracklayer)
gtf_file <- "C:/Users/user/folder1/folder2/referencegenome_genomic.gtf"
gtf <- import(gtf_file)

# Extract transcript-to-gene mappings

#tx2gene <- gtf[gtf$type == "transcript"]: This line of code creates a new data frame, tx2gene, which is a subset of the gtf data frame, containing only the rows where the type column is equal to "transcript". In the context of a GTF file, a "transcript" generally refers to the mRNA sequence that is transcribed from a gene.

#tx2gene <- data.frame(transcript_id = tx2gene$transcript_id, gene_id = tx2gene$gene_id): Here, tx2gene is being overwritten as a new data frame with only two columns - transcript_id and gene_id from the original tx2gene data frame. transcript_id corresponds to the unique identifiers of the transcripts, and gene_id corresponds to the unique identifiers of the genes.

tx2gene <- gtf[gtf$type == "transcript"]
tx2gene <- data.frame(transcript_id = tx2gene$transcript_id, gene_id = tx2gene$gene_id)

#import transcript abundance data # removed "ignoreTxVersion = TRUE" which led to an error in annotation, in this case, there are multiple versions for each transcript.
txi = tximport(files, type = "kallisto", tx2gene = tx2gene)

#set up metadata----
cell_type = as.factor(c(rep("mock",4), rep("treatment",4)))
cell_type = data.frame(cell_type)

#add metadata columns where a given cell type has a 1 and all other cell types have a 0

#Here, two cell types (or comparison groups) are defined, mac_control and dend_control. 
comparisons = c("mock", "treatment")

#A data frame is created, meta_data, with two columns: sample and cell_type. It is assumed that samples and cell_type are already defined elsewhere in your code.
meta_data = data.frame(sample = samples, cell_type = cell_type)

meta_data[comparisons] = 0 #[] is similar to $ to pick columns
for (i in 1:length(comparisons)){
  meta_data[which(meta_data$cell_type==comparisons[i]),comparisons[i]]=1
}

#meta_data[comparisons]=lapply(meta_data[comparisons], factor): This line transforms the mac_control and dend_control columns from numerical (integer) to categorical (factor) data. The lapply function applies the factor function to each column specified by comparisons.
meta_data[comparisons]=lapply(meta_data[comparisons], factor)
meta_data

#general dds----
dds <- DESeqDataSetFromTximport(txi,
                                colData = meta_data,
                                design = ~ cell_type)
as.data.frame(colData(dds))

dds<- DESeq(dds)
class(dds)

rld<-rlog(dds)
write.csv(as.data.frame(assay(rld)), file="DESEQ2_filename_rld.csv" )

#Look at sample-to-sample distance
sampleDists <- dist(t(assay(rld)))

sampleDistMatrix <- as.matrix(sampleDists)

rownames(sampleDistMatrix) <- paste(rld$sample, sep="-")

colnames(sampleDistMatrix) <- paste(rld$sample, sep="-")

colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)

pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)

#make DESeqDataSet for comparison----
dds_treatment = DESeqDataSetFromTximport(txi, colData = meta_data, design = ~ treatment)

#run differential expression analysis with default parameters
dds_treatment = DESeq(dds_treatment)
resultsNames(dds_treatment)
res_treatment = results(dds_treatment, contrast = c("treatment", "1", "0"), name="treatment_1_vs_0")
res_treatment
write.csv( as.data.frame(res_treatment), "DESEQ2_log2_treatment.csv" )

res_treatment_Sig <- subset(res_treatment, padj < 0.05)
res_treatment_Sig
write.csv( as.data.frame(res_treatment_Sig), "DESEQ2_padj_treatment.csv" )

#Create the heatmap
data <- as.matrix(data)

colnames(data)
rownames(data)

labs.row <- rownames(data)

#Set the color palette and extend to a range

pheatmap(data, cluster_col=FALSE, cutree_rows = 3, border_color = "black", fontsize_row = 6,
         colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
         labels_row=labs.row, cellwidth=20)

#Make volcano plot

library(EnhancedVolcano)

EnhancedVolcano(res_treatment,
                lab = rownames(res_treatment),
                x = 'log2FoldChange',
                y = 'padj',
                pCutoff = 0.05,
                pointSize = 3.0,
                labSize = 3.0,
                col=c('azure3', 'azure4', 'burlywood', 'brown3'),
                colAlpha = 0.7,
                drawConnectors = TRUE,
                widthConnectors = 1.0,
                colConnectors = 'black',
                boxedLabels = TRUE,
                selectLab = c('gene1', 'gene2'))
